# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:14:48+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class Arn(RootModel[constr(min_length=11, max_length=100)]):
    root: constr(min_length=11, max_length=100)


class BadRequestException(RootModel[Any]):
    root: Any


class Blob(RootModel[str]):
    root: str


class Boolean(RootModel[bool]):
    root: bool


class BoxedBoolean(RootModel[bool]):
    root: bool


class BoxedDouble(RootModel[float]):
    root: float


class BoxedFloat(RootModel[float]):
    root: float


class BoxedInteger(RootModel[int]):
    root: int


class BoxedLong(RootModel[int]):
    root: int


class DbName(RootModel[constr(min_length=0, max_length=64)]):
    root: constr(min_length=0, max_length=64)


class DecimalReturnType(Enum):
    STRING = 'STRING'
    DOUBLE_OR_LONG = 'DOUBLE_OR_LONG'


class DoubleArray(RootModel[List[BoxedDouble]]):
    root: List[BoxedDouble] = Field(
        ...,
        description='<p>An array of floating-point numbers.</p> <note> <p>Some array entries can be null.</p> </note>',
    )


class ForbiddenException(RootModel[Any]):
    root: Any


class FormattedSqlRecords(RootModel[str]):
    root: str


class Id(RootModel[constr(min_length=0, max_length=192)]):
    root: constr(min_length=0, max_length=192)


class Integer(RootModel[int]):
    root: int


class InternalServerErrorException(RootModel[Any]):
    root: Any


class Long(RootModel[int]):
    root: int


class LongArray(RootModel[List[BoxedLong]]):
    root: List[BoxedLong] = Field(
        ...,
        description='<p>An array of integers.</p> <note> <p>Some array entries can be null.</p> </note>',
    )


class LongReturnType(Enum):
    STRING = 'STRING'
    LONG = 'LONG'


class NotFoundException(RootModel[Any]):
    root: Any


class ParameterName(RootModel[str]):
    root: str


class RecordsFormatType(Enum):
    NONE = 'NONE'
    JSON = 'JSON'


class RecordsUpdated(RootModel[int]):
    root: int


class ResultSetOptions(BaseModel):
    decimalReturnType: Optional[DecimalReturnType] = None
    longReturnType: Optional[LongReturnType] = None


class RollbackTransactionRequest(BaseModel):
    resourceArn: Arn
    secretArn: Arn
    transactionId: Id


class ServiceUnavailableError(RootModel[Any]):
    root: Any


class SqlStatement(RootModel[constr(min_length=0, max_length=65536)]):
    root: constr(min_length=0, max_length=65536)


class StatementTimeoutException(RootModel[Any]):
    root: Any


class String(RootModel[str]):
    root: str


class StringArray(RootModel[List[String]]):
    root: List[String] = Field(
        ...,
        description='<p>An array of strings.</p> <note> <p>Some array entries can be null.</p> </note>',
    )


class TransactionStatus(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class TypeHint(Enum):
    JSON = 'JSON'
    UUID = 'UUID'
    TIMESTAMP = 'TIMESTAMP'
    DATE = 'DATE'
    TIME = 'TIME'
    DECIMAL = 'DECIMAL'


class BeginTransactionPostRequest(BaseModel):
    database: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='The name of the database.'
    )
    resourceArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.',
    )
    schema_: Optional[constr(min_length=0, max_length=64)] = Field(
        None, alias='schema', description='The name of the database schema.'
    )
    secretArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='The name or ARN of the secret that enables access to the DB cluster.',
    )


class CommitTransactionPostRequest(BaseModel):
    resourceArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.',
    )
    secretArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='The name or ARN of the secret that enables access to the DB cluster.',
    )
    transactionId: constr(min_length=0, max_length=192) = Field(
        ..., description='The identifier of the transaction to end and commit.'
    )


class FormatRecordsAs(Enum):
    NONE = 'NONE'
    JSON = 'JSON'


class ExecuteSqlPostRequest(BaseModel):
    awsSecretStoreArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='<p>The Amazon Resource Name (ARN) of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>',
    )
    database: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='The name of the database.'
    )
    dbClusterOrInstanceArn: constr(min_length=11, max_length=100) = Field(
        ..., description='The ARN of the Aurora Serverless DB cluster.'
    )
    schema_: Optional[constr(min_length=0, max_length=64)] = Field(
        None, alias='schema', description='The name of the database schema.'
    )
    sqlStatements: constr(min_length=0, max_length=65536) = Field(
        ...,
        description='<p>One or more SQL statements to run on the DB cluster.</p> <p>You can separate SQL statements from each other with a semicolon (;). Any valid SQL statement is permitted, including data definition, data manipulation, and commit statements. </p>',
    )


class RollbackTransactionPostRequest(BaseModel):
    resourceArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.',
    )
    secretArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='The name or ARN of the secret that enables access to the DB cluster.',
    )
    transactionId: constr(min_length=0, max_length=192) = Field(
        ..., description='The identifier of the transaction to roll back.'
    )


class BeginTransactionRequest(BaseModel):
    database: Optional[DbName] = None
    resourceArn: Arn
    schema_: Optional[DbName] = Field(None, alias='schema')
    secretArn: Arn


class BeginTransactionResponse(BaseModel):
    transactionId: Optional[Id] = None


class BooleanArray(RootModel[List[BoxedBoolean]]):
    root: List[BoxedBoolean] = Field(
        ...,
        description='<p>An array of Boolean values.</p> <note> <p>Some array entries can be null.</p> </note>',
    )


class ColumnMetadata(BaseModel):
    arrayBaseColumnType: Optional[Integer] = None
    isAutoIncrement: Optional[Boolean] = None
    isCaseSensitive: Optional[Boolean] = None
    isCurrency: Optional[Boolean] = None
    isSigned: Optional[Boolean] = None
    label: Optional[String] = None
    name: Optional[String] = None
    nullable: Optional[Integer] = None
    precision: Optional[Integer] = None
    scale: Optional[Integer] = None
    schemaName: Optional[String] = None
    tableName: Optional[String] = None
    type: Optional[Integer] = None
    typeName: Optional[String] = None


class CommitTransactionRequest(BaseModel):
    resourceArn: Arn
    secretArn: Arn
    transactionId: Id


class CommitTransactionResponse(BaseModel):
    transactionStatus: Optional[TransactionStatus] = None


class ExecuteSqlRequest(BaseModel):
    awsSecretStoreArn: Arn
    database: Optional[DbName] = None
    dbClusterOrInstanceArn: Arn
    schema_: Optional[DbName] = Field(None, alias='schema')
    sqlStatements: SqlStatement


class Metadata(RootModel[List[ColumnMetadata]]):
    root: List[ColumnMetadata]


class ResultSetMetadata(BaseModel):
    columnCount: Optional[Long] = None
    columnMetadata: Optional[Metadata] = None


class RollbackTransactionResponse(BaseModel):
    transactionStatus: Optional[TransactionStatus] = None


class ArrayOfArray(RootModel[List[ArrayValue]]):
    root: List[ArrayValue] = Field(
        ...,
        description='<p>An array of arrays.</p> <note> <p>Some array entries can be null.</p> </note>',
    )


class ArrayValue(BaseModel):
    arrayValues: Optional[ArrayOfArray] = None
    booleanValues: Optional[BooleanArray] = None
    doubleValues: Optional[DoubleArray] = None
    longValues: Optional[LongArray] = None
    stringValues: Optional[StringArray] = None


class ArrayValueList(RootModel[List[Value]]):
    root: List[Value]


class BatchExecuteStatementRequest(BaseModel):
    database: Optional[DbName] = None
    parameterSets: Optional[SqlParameterSets] = None
    resourceArn: Arn
    schema_: Optional[DbName] = Field(None, alias='schema')
    secretArn: Arn
    sql: SqlStatement
    transactionId: Optional[Id] = None


class BatchExecuteStatementResponse(BaseModel):
    updateResults: Optional[UpdateResults] = None


class ExecuteSqlResponse(BaseModel):
    sqlStatementResults: Optional[SqlStatementResults] = None


class ExecuteStatementRequest(BaseModel):
    continueAfterTimeout: Optional[Boolean] = None
    database: Optional[DbName] = None
    formatRecordsAs: Optional[RecordsFormatType] = None
    includeResultMetadata: Optional[Boolean] = None
    parameters: Optional[SqlParametersList] = None
    resourceArn: Arn
    resultSetOptions: Optional[ResultSetOptions] = None
    schema_: Optional[DbName] = Field(None, alias='schema')
    secretArn: Arn
    sql: SqlStatement
    transactionId: Optional[Id] = None


class ExecuteStatementResponse(BaseModel):
    columnMetadata: Optional[Metadata] = None
    formattedRecords: Optional[FormattedSqlRecords] = None
    generatedFields: Optional[FieldList] = None
    numberOfRecordsUpdated: Optional[RecordsUpdated] = None
    records: Optional[SqlRecords] = None


class FieldModel(BaseModel):
    arrayValue: Optional[ArrayValue] = None
    blobValue: Optional[Blob] = None
    booleanValue: Optional[BoxedBoolean] = None
    doubleValue: Optional[BoxedDouble] = None
    isNull: Optional[BoxedBoolean] = None
    longValue: Optional[BoxedLong] = None
    stringValue: Optional[String] = None


class FieldList(RootModel[List[FieldModel]]):
    root: List[FieldModel]


class Record(BaseModel):
    values: Optional[Row] = None


class Records(RootModel[List[Record]]):
    root: List[Record]


class ResultFrame(BaseModel):
    records: Optional[Records] = None
    resultSetMetadata: Optional[ResultSetMetadata] = None


class Row(RootModel[List[Value]]):
    root: List[Value]


class SqlParameter(BaseModel):
    name: Optional[ParameterName] = None
    typeHint: Optional[TypeHint] = None
    value: Optional[FieldModel] = None


class SqlParameterSets(RootModel[List[SqlParametersList]]):
    root: List[SqlParametersList]


class SqlParametersList(RootModel[List[SqlParameter]]):
    root: List[SqlParameter]


class SqlRecords(RootModel[List[FieldList]]):
    root: List[FieldList]


class SqlStatementResult(BaseModel):
    numberOfRecordsUpdated: Optional[RecordsUpdated] = None
    resultFrame: Optional[ResultFrame] = None


class SqlStatementResults(RootModel[List[SqlStatementResult]]):
    root: List[SqlStatementResult]


class StructValue(BaseModel):
    attributes: Optional[ArrayValueList] = None


class UpdateResult(BaseModel):
    generatedFields: Optional[FieldList] = None


class UpdateResults(RootModel[List[UpdateResult]]):
    root: List[UpdateResult]


class Value(BaseModel):
    arrayValues: Optional[ArrayValueList] = None
    bigIntValue: Optional[BoxedLong] = None
    bitValue: Optional[BoxedBoolean] = None
    blobValue: Optional[Blob] = None
    doubleValue: Optional[BoxedDouble] = None
    intValue: Optional[BoxedInteger] = None
    isNull: Optional[BoxedBoolean] = None
    realValue: Optional[BoxedFloat] = None
    stringValue: Optional[String] = None
    structValue: Optional[StructValue] = None


class BatchExecutePostRequest(BaseModel):
    database: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='The name of the database.'
    )
    parameterSets: Optional[List[SqlParametersList]] = Field(
        None,
        description='<p>The parameter set for the batch operation.</p> <p>The SQL statement is executed as many times as the number of parameter sets provided. To execute a SQL statement with no parameters, use one of the following options:</p> <ul> <li> <p>Specify one or more empty parameter sets.</p> </li> <li> <p>Use the <code>ExecuteStatement</code> operation instead of the <code>BatchExecuteStatement</code> operation.</p> </li> </ul> <note> <p>Array parameters are not supported.</p> </note>',
    )
    resourceArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.',
    )
    schema_: Optional[constr(min_length=0, max_length=64)] = Field(
        None,
        alias='schema',
        description="<p>The name of the database schema.</p> <note> <p>Currently, the <code>schema</code> parameter isn't supported.</p> </note>",
    )
    secretArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='<p>The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>',
    )
    sql: constr(min_length=0, max_length=65536) = Field(
        ...,
        description="The SQL statement to run. Don't include a semicolon (;) at the end of the SQL statement.",
    )
    transactionId: Optional[constr(min_length=0, max_length=192)] = Field(
        None,
        description="<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>",
    )


class ExecutePostRequest(BaseModel):
    continueAfterTimeout: Optional[bool] = Field(
        None,
        description='<p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <note> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </note>',
    )
    database: Optional[constr(min_length=0, max_length=64)] = Field(
        None, description='The name of the database.'
    )
    formatRecordsAs: Optional[FormatRecordsAs] = Field(
        None,
        description='<p>A value that indicates whether to format the result set as a single JSON string. This parameter only applies to <code>SELECT</code> statements and is ignored for other types of statements. Allowed values are <code>NONE</code> and <code>JSON</code>. The default value is <code>NONE</code>. The result is returned in the <code>formattedRecords</code> field.</p> <p>For usage information about the JSON format for result sets, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API</a> in the <i>Amazon Aurora User Guide</i>.</p>',
    )
    includeResultMetadata: Optional[bool] = Field(
        None,
        description='A value that indicates whether to include metadata in the results.',
    )
    parameters: Optional[List[SqlParameter]] = Field(
        None,
        description='<p>The parameters for the SQL statement.</p> <note> <p>Array parameters are not supported.</p> </note>',
    )
    resourceArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.',
    )
    resultSetOptions: Optional[ResultSetOptions] = Field(
        None, description='Options that control how the result set is returned.'
    )
    schema_: Optional[constr(min_length=0, max_length=64)] = Field(
        None,
        alias='schema',
        description="<p>The name of the database schema.</p> <note> <p>Currently, the <code>schema</code> parameter isn't supported.</p> </note>",
    )
    secretArn: constr(min_length=11, max_length=100) = Field(
        ...,
        description='<p>The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>',
    )
    sql: constr(min_length=0, max_length=65536) = Field(
        ..., description='The SQL statement to run.'
    )
    transactionId: Optional[constr(min_length=0, max_length=192)] = Field(
        None,
        description="<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>",
    )


ArrayOfArray.model_rebuild()
ArrayValueList.model_rebuild()
BatchExecuteStatementRequest.model_rebuild()
BatchExecuteStatementResponse.model_rebuild()
ExecuteSqlResponse.model_rebuild()
ExecuteStatementRequest.model_rebuild()
ExecuteStatementResponse.model_rebuild()
Record.model_rebuild()
Row.model_rebuild()
SqlParameterSets.model_rebuild()
